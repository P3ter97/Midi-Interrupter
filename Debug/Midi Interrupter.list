
Midi Interrupter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000128c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001398  08001398  00011398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013e0  080013e0  000113e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013e4  080013e4  000113e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080013e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  2000000c  080013f4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000070  080013f4  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cabb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001eee  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002812  00000000  00000000  0002e9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000568  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006a0  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003252  00000000  00000000  00031df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002039  00000000  00000000  0003504a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037083  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000d40  00000000  00000000  00037100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001380 	.word	0x08001380

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001380 	.word	0x08001380

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f89e 	bl	80002a4 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ffbe 	bl	800112c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800028c:	2301      	movs	r3, #1
 800028e:	0942      	lsrs	r2, r0, #5
 8000290:	f000 001f 	and.w	r0, r0, #31
 8000294:	fa03 f000 	lsl.w	r0, r3, r0
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_NVIC_EnableIRQ+0x14>)
 800029a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a4:	3801      	subs	r0, #1
 80002a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002aa:	d20a      	bcs.n	80002c2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002d2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	bf0c      	ite	eq
 80002d8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002dc:	f022 0204 	bicne.w	r2, r2, #4
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	4770      	bx	lr
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002e8:	4770      	bx	lr

080002ea <HAL_SYSTICK_IRQHandler>:
{
 80002ea:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002ec:	f7ff fffc 	bl	80002e8 <HAL_SYSTICK_Callback>
 80002f0:	bd08      	pop	{r3, pc}
	...

080002f4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002f4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002f8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002fa:	2b02      	cmp	r3, #2
 80002fc:	d003      	beq.n	8000306 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002fe:	2304      	movs	r3, #4
 8000300:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000302:	2001      	movs	r0, #1
 8000304:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000306:	6803      	ldr	r3, [r0, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	f022 020e 	bic.w	r2, r2, #14
 800030e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	f022 0201 	bic.w	r2, r2, #1
 8000316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <HAL_DMA_Abort_IT+0x88>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d01f      	beq.n	800035e <HAL_DMA_Abort_IT+0x6a>
 800031e:	3214      	adds	r2, #20
 8000320:	4293      	cmp	r3, r2
 8000322:	d01e      	beq.n	8000362 <HAL_DMA_Abort_IT+0x6e>
 8000324:	3214      	adds	r2, #20
 8000326:	4293      	cmp	r3, r2
 8000328:	d01d      	beq.n	8000366 <HAL_DMA_Abort_IT+0x72>
 800032a:	3214      	adds	r2, #20
 800032c:	4293      	cmp	r3, r2
 800032e:	d01d      	beq.n	800036c <HAL_DMA_Abort_IT+0x78>
 8000330:	3214      	adds	r2, #20
 8000332:	4293      	cmp	r3, r2
 8000334:	d01d      	beq.n	8000372 <HAL_DMA_Abort_IT+0x7e>
 8000336:	3214      	adds	r2, #20
 8000338:	4293      	cmp	r3, r2
 800033a:	bf0c      	ite	eq
 800033c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000340:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000344:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000346:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000348:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800034a:	2301      	movs	r3, #1
 800034c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000350:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000352:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000356:	b17b      	cbz	r3, 8000378 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000358:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800035a:	4620      	mov	r0, r4
 800035c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800035e:	2301      	movs	r3, #1
 8000360:	e7f0      	b.n	8000344 <HAL_DMA_Abort_IT+0x50>
 8000362:	2310      	movs	r3, #16
 8000364:	e7ee      	b.n	8000344 <HAL_DMA_Abort_IT+0x50>
 8000366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036a:	e7eb      	b.n	8000344 <HAL_DMA_Abort_IT+0x50>
 800036c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000370:	e7e8      	b.n	8000344 <HAL_DMA_Abort_IT+0x50>
 8000372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000376:	e7e5      	b.n	8000344 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000378:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800037a:	bd10      	pop	{r4, pc}
 800037c:	40020008 	.word	0x40020008
 8000380:	40020000 	.word	0x40020000

08000384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000388:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800038a:	4616      	mov	r6, r2
 800038c:	4b65      	ldr	r3, [pc, #404]	; (8000524 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800038e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000534 <HAL_GPIO_Init+0x1b0>
 8000392:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000538 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000396:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800039a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800039c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	d17f      	bne.n	80004a8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80003a8:	684d      	ldr	r5, [r1, #4]
 80003aa:	2d12      	cmp	r5, #18
 80003ac:	f000 80af 	beq.w	800050e <HAL_GPIO_Init+0x18a>
 80003b0:	f200 8088 	bhi.w	80004c4 <HAL_GPIO_Init+0x140>
 80003b4:	2d02      	cmp	r5, #2
 80003b6:	f000 80a7 	beq.w	8000508 <HAL_GPIO_Init+0x184>
 80003ba:	d87c      	bhi.n	80004b6 <HAL_GPIO_Init+0x132>
 80003bc:	2d00      	cmp	r5, #0
 80003be:	f000 808e 	beq.w	80004de <HAL_GPIO_Init+0x15a>
 80003c2:	2d01      	cmp	r5, #1
 80003c4:	f000 809e 	beq.w	8000504 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003c8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003cc:	2cff      	cmp	r4, #255	; 0xff
 80003ce:	bf93      	iteet	ls
 80003d0:	4682      	movls	sl, r0
 80003d2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003d6:	3d08      	subhi	r5, #8
 80003d8:	f8d0 b000 	ldrls.w	fp, [r0]
 80003dc:	bf92      	itee	ls
 80003de:	00b5      	lslls	r5, r6, #2
 80003e0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003e4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003e6:	fa09 f805 	lsl.w	r8, r9, r5
 80003ea:	ea2b 0808 	bic.w	r8, fp, r8
 80003ee:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f2:	bf88      	it	hi
 80003f4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f8:	ea48 0505 	orr.w	r5, r8, r5
 80003fc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000400:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000404:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000408:	d04e      	beq.n	80004a8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4d47      	ldr	r5, [pc, #284]	; (8000528 <HAL_GPIO_Init+0x1a4>)
 800040c:	4f46      	ldr	r7, [pc, #280]	; (8000528 <HAL_GPIO_Init+0x1a4>)
 800040e:	69ad      	ldr	r5, [r5, #24]
 8000410:	f026 0803 	bic.w	r8, r6, #3
 8000414:	f045 0501 	orr.w	r5, r5, #1
 8000418:	61bd      	str	r5, [r7, #24]
 800041a:	69bd      	ldr	r5, [r7, #24]
 800041c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000420:	f005 0501 	and.w	r5, r5, #1
 8000424:	9501      	str	r5, [sp, #4]
 8000426:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800042a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000430:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000434:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000438:	fa09 f90b 	lsl.w	r9, r9, fp
 800043c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	4d3a      	ldr	r5, [pc, #232]	; (800052c <HAL_GPIO_Init+0x1a8>)
 8000442:	42a8      	cmp	r0, r5
 8000444:	d068      	beq.n	8000518 <HAL_GPIO_Init+0x194>
 8000446:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044a:	42a8      	cmp	r0, r5
 800044c:	d066      	beq.n	800051c <HAL_GPIO_Init+0x198>
 800044e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000452:	42a8      	cmp	r0, r5
 8000454:	d064      	beq.n	8000520 <HAL_GPIO_Init+0x19c>
 8000456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045a:	42a8      	cmp	r0, r5
 800045c:	bf0c      	ite	eq
 800045e:	2503      	moveq	r5, #3
 8000460:	2504      	movne	r5, #4
 8000462:	fa05 f50b 	lsl.w	r5, r5, fp
 8000466:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800046a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800046e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000470:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000474:	bf14      	ite	ne
 8000476:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000478:	43a5      	biceq	r5, r4
 800047a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800047c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800047e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000482:	bf14      	ite	ne
 8000484:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000486:	43a5      	biceq	r5, r4
 8000488:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800048a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800048c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000490:	bf14      	ite	ne
 8000492:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000494:	43a5      	biceq	r5, r4
 8000496:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000498:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800049a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800049e:	bf14      	ite	ne
 80004a0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004a2:	ea25 0404 	biceq.w	r4, r5, r4
 80004a6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004a8:	3601      	adds	r6, #1
 80004aa:	2e10      	cmp	r6, #16
 80004ac:	f47f af73 	bne.w	8000396 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80004b0:	b003      	add	sp, #12
 80004b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004b6:	2d03      	cmp	r5, #3
 80004b8:	d022      	beq.n	8000500 <HAL_GPIO_Init+0x17c>
 80004ba:	2d11      	cmp	r5, #17
 80004bc:	d184      	bne.n	80003c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004be:	68ca      	ldr	r2, [r1, #12]
 80004c0:	3204      	adds	r2, #4
          break;
 80004c2:	e781      	b.n	80003c8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004c4:	4f1a      	ldr	r7, [pc, #104]	; (8000530 <HAL_GPIO_Init+0x1ac>)
 80004c6:	42bd      	cmp	r5, r7
 80004c8:	d009      	beq.n	80004de <HAL_GPIO_Init+0x15a>
 80004ca:	d812      	bhi.n	80004f2 <HAL_GPIO_Init+0x16e>
 80004cc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800053c <HAL_GPIO_Init+0x1b8>
 80004d0:	454d      	cmp	r5, r9
 80004d2:	d004      	beq.n	80004de <HAL_GPIO_Init+0x15a>
 80004d4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004d8:	454d      	cmp	r5, r9
 80004da:	f47f af75 	bne.w	80003c8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004de:	688a      	ldr	r2, [r1, #8]
 80004e0:	b1c2      	cbz	r2, 8000514 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004e4:	bf0c      	ite	eq
 80004e6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004ea:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ee:	2208      	movs	r2, #8
 80004f0:	e76a      	b.n	80003c8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004f2:	4575      	cmp	r5, lr
 80004f4:	d0f3      	beq.n	80004de <HAL_GPIO_Init+0x15a>
 80004f6:	4565      	cmp	r5, ip
 80004f8:	d0f1      	beq.n	80004de <HAL_GPIO_Init+0x15a>
 80004fa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000540 <HAL_GPIO_Init+0x1bc>
 80004fe:	e7eb      	b.n	80004d8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000500:	2200      	movs	r2, #0
 8000502:	e761      	b.n	80003c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	68ca      	ldr	r2, [r1, #12]
          break;
 8000506:	e75f      	b.n	80003c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000508:	68ca      	ldr	r2, [r1, #12]
 800050a:	3208      	adds	r2, #8
          break;
 800050c:	e75c      	b.n	80003c8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800050e:	68ca      	ldr	r2, [r1, #12]
 8000510:	320c      	adds	r2, #12
          break;
 8000512:	e759      	b.n	80003c8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000514:	2204      	movs	r2, #4
 8000516:	e757      	b.n	80003c8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000518:	2500      	movs	r5, #0
 800051a:	e7a2      	b.n	8000462 <HAL_GPIO_Init+0xde>
 800051c:	2501      	movs	r5, #1
 800051e:	e7a0      	b.n	8000462 <HAL_GPIO_Init+0xde>
 8000520:	2502      	movs	r5, #2
 8000522:	e79e      	b.n	8000462 <HAL_GPIO_Init+0xde>
 8000524:	40010400 	.word	0x40010400
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	10210000 	.word	0x10210000
 8000534:	10310000 	.word	0x10310000
 8000538:	10320000 	.word	0x10320000
 800053c:	10110000 	.word	0x10110000
 8000540:	10220000 	.word	0x10220000

08000544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000544:	b10a      	cbz	r2, 800054a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000546:	6101      	str	r1, [r0, #16]
 8000548:	4770      	bx	lr
 800054a:	0409      	lsls	r1, r1, #16
 800054c:	e7fb      	b.n	8000546 <HAL_GPIO_WritePin+0x2>

0800054e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800054e:	68c3      	ldr	r3, [r0, #12]
 8000550:	4059      	eors	r1, r3
 8000552:	60c1      	str	r1, [r0, #12]
 8000554:	4770      	bx	lr
	...

08000558 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000558:	6803      	ldr	r3, [r0, #0]
{
 800055a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055e:	07db      	lsls	r3, r3, #31
{
 8000560:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000562:	d410      	bmi.n	8000586 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000564:	682b      	ldr	r3, [r5, #0]
 8000566:	079f      	lsls	r7, r3, #30
 8000568:	d45e      	bmi.n	8000628 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800056a:	682b      	ldr	r3, [r5, #0]
 800056c:	0719      	lsls	r1, r3, #28
 800056e:	f100 8095 	bmi.w	800069c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000572:	682b      	ldr	r3, [r5, #0]
 8000574:	075a      	lsls	r2, r3, #29
 8000576:	f100 80bf 	bmi.w	80006f8 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800057a:	69ea      	ldr	r2, [r5, #28]
 800057c:	2a00      	cmp	r2, #0
 800057e:	f040 812d 	bne.w	80007dc <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000582:	2000      	movs	r0, #0
 8000584:	e014      	b.n	80005b0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000586:	4c90      	ldr	r4, [pc, #576]	; (80007c8 <HAL_RCC_OscConfig+0x270>)
 8000588:	6863      	ldr	r3, [r4, #4]
 800058a:	f003 030c 	and.w	r3, r3, #12
 800058e:	2b04      	cmp	r3, #4
 8000590:	d007      	beq.n	80005a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000592:	6863      	ldr	r3, [r4, #4]
 8000594:	f003 030c 	and.w	r3, r3, #12
 8000598:	2b08      	cmp	r3, #8
 800059a:	d10c      	bne.n	80005b6 <HAL_RCC_OscConfig+0x5e>
 800059c:	6863      	ldr	r3, [r4, #4]
 800059e:	03de      	lsls	r6, r3, #15
 80005a0:	d509      	bpl.n	80005b6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	039c      	lsls	r4, r3, #14
 80005a6:	d5dd      	bpl.n	8000564 <HAL_RCC_OscConfig+0xc>
 80005a8:	686b      	ldr	r3, [r5, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1da      	bne.n	8000564 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005ae:	2001      	movs	r0, #1
}
 80005b0:	b002      	add	sp, #8
 80005b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b6:	686b      	ldr	r3, [r5, #4]
 80005b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005bc:	d110      	bne.n	80005e0 <HAL_RCC_OscConfig+0x88>
 80005be:	6823      	ldr	r3, [r4, #0]
 80005c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005c6:	f7ff fe03 	bl	80001d0 <HAL_GetTick>
 80005ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	0398      	lsls	r0, r3, #14
 80005d0:	d4c8      	bmi.n	8000564 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d2:	f7ff fdfd 	bl	80001d0 <HAL_GetTick>
 80005d6:	1b80      	subs	r0, r0, r6
 80005d8:	2864      	cmp	r0, #100	; 0x64
 80005da:	d9f7      	bls.n	80005cc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005dc:	2003      	movs	r0, #3
 80005de:	e7e7      	b.n	80005b0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e0:	b99b      	cbnz	r3, 800060a <HAL_RCC_OscConfig+0xb2>
 80005e2:	6823      	ldr	r3, [r4, #0]
 80005e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e8:	6023      	str	r3, [r4, #0]
 80005ea:	6823      	ldr	r3, [r4, #0]
 80005ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005f2:	f7ff fded 	bl	80001d0 <HAL_GetTick>
 80005f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f8:	6823      	ldr	r3, [r4, #0]
 80005fa:	0399      	lsls	r1, r3, #14
 80005fc:	d5b2      	bpl.n	8000564 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fe:	f7ff fde7 	bl	80001d0 <HAL_GetTick>
 8000602:	1b80      	subs	r0, r0, r6
 8000604:	2864      	cmp	r0, #100	; 0x64
 8000606:	d9f7      	bls.n	80005f8 <HAL_RCC_OscConfig+0xa0>
 8000608:	e7e8      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	d103      	bne.n	800061a <HAL_RCC_OscConfig+0xc2>
 8000612:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000616:	6023      	str	r3, [r4, #0]
 8000618:	e7d1      	b.n	80005be <HAL_RCC_OscConfig+0x66>
 800061a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061e:	6023      	str	r3, [r4, #0]
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000626:	e7cd      	b.n	80005c4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000628:	4c67      	ldr	r4, [pc, #412]	; (80007c8 <HAL_RCC_OscConfig+0x270>)
 800062a:	6863      	ldr	r3, [r4, #4]
 800062c:	f013 0f0c 	tst.w	r3, #12
 8000630:	d007      	beq.n	8000642 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000632:	6863      	ldr	r3, [r4, #4]
 8000634:	f003 030c 	and.w	r3, r3, #12
 8000638:	2b08      	cmp	r3, #8
 800063a:	d110      	bne.n	800065e <HAL_RCC_OscConfig+0x106>
 800063c:	6863      	ldr	r3, [r4, #4]
 800063e:	03da      	lsls	r2, r3, #15
 8000640:	d40d      	bmi.n	800065e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	079b      	lsls	r3, r3, #30
 8000646:	d502      	bpl.n	800064e <HAL_RCC_OscConfig+0xf6>
 8000648:	692b      	ldr	r3, [r5, #16]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d1af      	bne.n	80005ae <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	696a      	ldr	r2, [r5, #20]
 8000652:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000656:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800065a:	6023      	str	r3, [r4, #0]
 800065c:	e785      	b.n	800056a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800065e:	692a      	ldr	r2, [r5, #16]
 8000660:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <HAL_RCC_OscConfig+0x274>)
 8000662:	b16a      	cbz	r2, 8000680 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000664:	2201      	movs	r2, #1
 8000666:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000668:	f7ff fdb2 	bl	80001d0 <HAL_GetTick>
 800066c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	079f      	lsls	r7, r3, #30
 8000672:	d4ec      	bmi.n	800064e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000674:	f7ff fdac 	bl	80001d0 <HAL_GetTick>
 8000678:	1b80      	subs	r0, r0, r6
 800067a:	2802      	cmp	r0, #2
 800067c:	d9f7      	bls.n	800066e <HAL_RCC_OscConfig+0x116>
 800067e:	e7ad      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000680:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000688:	6823      	ldr	r3, [r4, #0]
 800068a:	0798      	lsls	r0, r3, #30
 800068c:	f57f af6d 	bpl.w	800056a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000690:	f7ff fd9e 	bl	80001d0 <HAL_GetTick>
 8000694:	1b80      	subs	r0, r0, r6
 8000696:	2802      	cmp	r0, #2
 8000698:	d9f6      	bls.n	8000688 <HAL_RCC_OscConfig+0x130>
 800069a:	e79f      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800069c:	69aa      	ldr	r2, [r5, #24]
 800069e:	4c4a      	ldr	r4, [pc, #296]	; (80007c8 <HAL_RCC_OscConfig+0x270>)
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <HAL_RCC_OscConfig+0x278>)
 80006a2:	b1da      	cbz	r2, 80006dc <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006a8:	f7ff fd92 	bl	80001d0 <HAL_GetTick>
 80006ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b0:	079b      	lsls	r3, r3, #30
 80006b2:	d50d      	bpl.n	80006d0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006b4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <HAL_RCC_OscConfig+0x27c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80006c0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006c2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006c4:	9b01      	ldr	r3, [sp, #4]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	9201      	str	r2, [sp, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f9      	bne.n	80006c2 <HAL_RCC_OscConfig+0x16a>
 80006ce:	e750      	b.n	8000572 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d0:	f7ff fd7e 	bl	80001d0 <HAL_GetTick>
 80006d4:	1b80      	subs	r0, r0, r6
 80006d6:	2802      	cmp	r0, #2
 80006d8:	d9e9      	bls.n	80006ae <HAL_RCC_OscConfig+0x156>
 80006da:	e77f      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006de:	f7ff fd77 	bl	80001d0 <HAL_GetTick>
 80006e2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e6:	079f      	lsls	r7, r3, #30
 80006e8:	f57f af43 	bpl.w	8000572 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ec:	f7ff fd70 	bl	80001d0 <HAL_GetTick>
 80006f0:	1b80      	subs	r0, r0, r6
 80006f2:	2802      	cmp	r0, #2
 80006f4:	d9f6      	bls.n	80006e4 <HAL_RCC_OscConfig+0x18c>
 80006f6:	e771      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f8:	4c33      	ldr	r4, [pc, #204]	; (80007c8 <HAL_RCC_OscConfig+0x270>)
 80006fa:	69e3      	ldr	r3, [r4, #28]
 80006fc:	00d8      	lsls	r0, r3, #3
 80006fe:	d424      	bmi.n	800074a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000700:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	69e3      	ldr	r3, [r4, #28]
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	61e3      	str	r3, [r4, #28]
 800070a:	69e3      	ldr	r3, [r4, #28]
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000714:	4e30      	ldr	r6, [pc, #192]	; (80007d8 <HAL_RCC_OscConfig+0x280>)
 8000716:	6833      	ldr	r3, [r6, #0]
 8000718:	05d9      	lsls	r1, r3, #23
 800071a:	d518      	bpl.n	800074e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071c:	68eb      	ldr	r3, [r5, #12]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d126      	bne.n	8000770 <HAL_RCC_OscConfig+0x218>
 8000722:	6a23      	ldr	r3, [r4, #32]
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800072a:	f7ff fd51 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000732:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000734:	6a23      	ldr	r3, [r4, #32]
 8000736:	079b      	lsls	r3, r3, #30
 8000738:	d53f      	bpl.n	80007ba <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800073a:	2f00      	cmp	r7, #0
 800073c:	f43f af1d 	beq.w	800057a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000740:	69e3      	ldr	r3, [r4, #28]
 8000742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000746:	61e3      	str	r3, [r4, #28]
 8000748:	e717      	b.n	800057a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800074a:	2700      	movs	r7, #0
 800074c:	e7e2      	b.n	8000714 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800074e:	6833      	ldr	r3, [r6, #0]
 8000750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000754:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000756:	f7ff fd3b 	bl	80001d0 <HAL_GetTick>
 800075a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800075c:	6833      	ldr	r3, [r6, #0]
 800075e:	05da      	lsls	r2, r3, #23
 8000760:	d4dc      	bmi.n	800071c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000762:	f7ff fd35 	bl	80001d0 <HAL_GetTick>
 8000766:	eba0 0008 	sub.w	r0, r0, r8
 800076a:	2864      	cmp	r0, #100	; 0x64
 800076c:	d9f6      	bls.n	800075c <HAL_RCC_OscConfig+0x204>
 800076e:	e735      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000770:	b9ab      	cbnz	r3, 800079e <HAL_RCC_OscConfig+0x246>
 8000772:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000774:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	6223      	str	r3, [r4, #32]
 800077e:	6a23      	ldr	r3, [r4, #32]
 8000780:	f023 0304 	bic.w	r3, r3, #4
 8000784:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800078c:	6a23      	ldr	r3, [r4, #32]
 800078e:	0798      	lsls	r0, r3, #30
 8000790:	d5d3      	bpl.n	800073a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000792:	f7ff fd1d 	bl	80001d0 <HAL_GetTick>
 8000796:	1b80      	subs	r0, r0, r6
 8000798:	4540      	cmp	r0, r8
 800079a:	d9f7      	bls.n	800078c <HAL_RCC_OscConfig+0x234>
 800079c:	e71e      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800079e:	2b05      	cmp	r3, #5
 80007a0:	6a23      	ldr	r3, [r4, #32]
 80007a2:	d103      	bne.n	80007ac <HAL_RCC_OscConfig+0x254>
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6223      	str	r3, [r4, #32]
 80007aa:	e7ba      	b.n	8000722 <HAL_RCC_OscConfig+0x1ca>
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	6223      	str	r3, [r4, #32]
 80007b2:	6a23      	ldr	r3, [r4, #32]
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	e7b6      	b.n	8000728 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ba:	f7ff fd09 	bl	80001d0 <HAL_GetTick>
 80007be:	eba0 0008 	sub.w	r0, r0, r8
 80007c2:	42b0      	cmp	r0, r6
 80007c4:	d9b6      	bls.n	8000734 <HAL_RCC_OscConfig+0x1dc>
 80007c6:	e709      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	42420000 	.word	0x42420000
 80007d0:	42420480 	.word	0x42420480
 80007d4:	20000008 	.word	0x20000008
 80007d8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007dc:	4c22      	ldr	r4, [pc, #136]	; (8000868 <HAL_RCC_OscConfig+0x310>)
 80007de:	6863      	ldr	r3, [r4, #4]
 80007e0:	f003 030c 	and.w	r3, r3, #12
 80007e4:	2b08      	cmp	r3, #8
 80007e6:	f43f aee2 	beq.w	80005ae <HAL_RCC_OscConfig+0x56>
 80007ea:	2300      	movs	r3, #0
 80007ec:	4e1f      	ldr	r6, [pc, #124]	; (800086c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007f0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f2:	d12b      	bne.n	800084c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007f4:	f7ff fcec 	bl	80001d0 <HAL_GetTick>
 80007f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	0199      	lsls	r1, r3, #6
 80007fe:	d41f      	bmi.n	8000840 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000800:	6a2b      	ldr	r3, [r5, #32]
 8000802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000806:	d105      	bne.n	8000814 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000808:	6862      	ldr	r2, [r4, #4]
 800080a:	68a9      	ldr	r1, [r5, #8]
 800080c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000810:	430a      	orrs	r2, r1
 8000812:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000814:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000816:	6862      	ldr	r2, [r4, #4]
 8000818:	430b      	orrs	r3, r1
 800081a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800081e:	4313      	orrs	r3, r2
 8000820:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000822:	2301      	movs	r3, #1
 8000824:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000826:	f7ff fcd3 	bl	80001d0 <HAL_GetTick>
 800082a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	019a      	lsls	r2, r3, #6
 8000830:	f53f aea7 	bmi.w	8000582 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f7ff fccc 	bl	80001d0 <HAL_GetTick>
 8000838:	1b40      	subs	r0, r0, r5
 800083a:	2802      	cmp	r0, #2
 800083c:	d9f6      	bls.n	800082c <HAL_RCC_OscConfig+0x2d4>
 800083e:	e6cd      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000840:	f7ff fcc6 	bl	80001d0 <HAL_GetTick>
 8000844:	1bc0      	subs	r0, r0, r7
 8000846:	2802      	cmp	r0, #2
 8000848:	d9d7      	bls.n	80007fa <HAL_RCC_OscConfig+0x2a2>
 800084a:	e6c7      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800084c:	f7ff fcc0 	bl	80001d0 <HAL_GetTick>
 8000850:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	f57f ae94 	bpl.w	8000582 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800085a:	f7ff fcb9 	bl	80001d0 <HAL_GetTick>
 800085e:	1b40      	subs	r0, r0, r5
 8000860:	2802      	cmp	r0, #2
 8000862:	d9f6      	bls.n	8000852 <HAL_RCC_OscConfig+0x2fa>
 8000864:	e6ba      	b.n	80005dc <HAL_RCC_OscConfig+0x84>
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	42420060 	.word	0x42420060

08000870 <HAL_RCC_GetSysClockFreq>:
{
 8000870:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000874:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000876:	ac02      	add	r4, sp, #8
 8000878:	f103 0510 	add.w	r5, r3, #16
 800087c:	4622      	mov	r2, r4
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	6859      	ldr	r1, [r3, #4]
 8000882:	3308      	adds	r3, #8
 8000884:	c203      	stmia	r2!, {r0, r1}
 8000886:	42ab      	cmp	r3, r5
 8000888:	4614      	mov	r4, r2
 800088a:	d1f7      	bne.n	800087c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800088c:	2301      	movs	r3, #1
 800088e:	f88d 3004 	strb.w	r3, [sp, #4]
 8000892:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000894:	4911      	ldr	r1, [pc, #68]	; (80008dc <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000896:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800089a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800089c:	f003 020c 	and.w	r2, r3, #12
 80008a0:	2a08      	cmp	r2, #8
 80008a2:	d117      	bne.n	80008d4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008a4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008a8:	a806      	add	r0, sp, #24
 80008aa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ac:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008ae:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008b2:	d50c      	bpl.n	80008ce <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008bc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008be:	aa06      	add	r2, sp, #24
 80008c0:	4413      	add	r3, r2
 80008c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008ca:	b007      	add	sp, #28
 80008cc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x74>)
 80008d0:	4350      	muls	r0, r2
 80008d2:	e7fa      	b.n	80008ca <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008d6:	e7f8      	b.n	80008ca <HAL_RCC_GetSysClockFreq+0x5a>
 80008d8:	08001398 	.word	0x08001398
 80008dc:	40021000 	.word	0x40021000
 80008e0:	007a1200 	.word	0x007a1200
 80008e4:	003d0900 	.word	0x003d0900

080008e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e8:	4a4d      	ldr	r2, [pc, #308]	; (8000a20 <HAL_RCC_ClockConfig+0x138>)
{
 80008ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ee:	6813      	ldr	r3, [r2, #0]
{
 80008f0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	428b      	cmp	r3, r1
{
 80008f8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fa:	d328      	bcc.n	800094e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008fc:	682a      	ldr	r2, [r5, #0]
 80008fe:	0791      	lsls	r1, r2, #30
 8000900:	d432      	bmi.n	8000968 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000902:	07d2      	lsls	r2, r2, #31
 8000904:	d438      	bmi.n	8000978 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000906:	4a46      	ldr	r2, [pc, #280]	; (8000a20 <HAL_RCC_ClockConfig+0x138>)
 8000908:	6813      	ldr	r3, [r2, #0]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	429e      	cmp	r6, r3
 8000910:	d373      	bcc.n	80009fa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000912:	682a      	ldr	r2, [r5, #0]
 8000914:	4c43      	ldr	r4, [pc, #268]	; (8000a24 <HAL_RCC_ClockConfig+0x13c>)
 8000916:	f012 0f04 	tst.w	r2, #4
 800091a:	d179      	bne.n	8000a10 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800091c:	0713      	lsls	r3, r2, #28
 800091e:	d506      	bpl.n	800092e <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	692a      	ldr	r2, [r5, #16]
 8000924:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000928:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800092c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800092e:	f7ff ff9f 	bl	8000870 <HAL_RCC_GetSysClockFreq>
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_RCC_ClockConfig+0x140>)
 8000936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <HAL_RCC_ClockConfig+0x144>)
 8000940:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fc02 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
}
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f023 0307 	bic.w	r3, r3, #7
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000958:	6813      	ldr	r3, [r2, #0]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	4299      	cmp	r1, r3
 8000960:	d0cc      	beq.n	80008fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000962:	2001      	movs	r0, #1
 8000964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000968:	492e      	ldr	r1, [pc, #184]	; (8000a24 <HAL_RCC_ClockConfig+0x13c>)
 800096a:	68a8      	ldr	r0, [r5, #8]
 800096c:	684b      	ldr	r3, [r1, #4]
 800096e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000972:	4303      	orrs	r3, r0
 8000974:	604b      	str	r3, [r1, #4]
 8000976:	e7c4      	b.n	8000902 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000978:	686a      	ldr	r2, [r5, #4]
 800097a:	4c2a      	ldr	r4, [pc, #168]	; (8000a24 <HAL_RCC_ClockConfig+0x13c>)
 800097c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000980:	d11c      	bne.n	80009bc <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000982:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000986:	d0ec      	beq.n	8000962 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000988:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800098a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	4313      	orrs	r3, r2
 8000994:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000996:	f7ff fc1b 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800099c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d114      	bne.n	80009cc <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009a2:	6863      	ldr	r3, [r4, #4]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d0ac      	beq.n	8000906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc10 	bl	80001d0 <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	4540      	cmp	r0, r8
 80009b4:	d9f5      	bls.n	80009a2 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80009b6:	2003      	movs	r0, #3
 80009b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009bc:	2a02      	cmp	r2, #2
 80009be:	d102      	bne.n	80009c6 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009c4:	e7df      	b.n	8000986 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c6:	f013 0f02 	tst.w	r3, #2
 80009ca:	e7dc      	b.n	8000986 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d10f      	bne.n	80009f0 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d0:	6863      	ldr	r3, [r4, #4]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d095      	beq.n	8000906 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009da:	f7ff fbf9 	bl	80001d0 <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	4540      	cmp	r0, r8
 80009e2:	d9f5      	bls.n	80009d0 <HAL_RCC_ClockConfig+0xe8>
 80009e4:	e7e7      	b.n	80009b6 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e6:	f7ff fbf3 	bl	80001d0 <HAL_GetTick>
 80009ea:	1bc0      	subs	r0, r0, r7
 80009ec:	4540      	cmp	r0, r8
 80009ee:	d8e2      	bhi.n	80009b6 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	f013 0f0c 	tst.w	r3, #12
 80009f6:	d1f6      	bne.n	80009e6 <HAL_RCC_ClockConfig+0xfe>
 80009f8:	e785      	b.n	8000906 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009fa:	6813      	ldr	r3, [r2, #0]
 80009fc:	f023 0307 	bic.w	r3, r3, #7
 8000a00:	4333      	orrs	r3, r6
 8000a02:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	429e      	cmp	r6, r3
 8000a0c:	d1a9      	bne.n	8000962 <HAL_RCC_ClockConfig+0x7a>
 8000a0e:	e780      	b.n	8000912 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	68e9      	ldr	r1, [r5, #12]
 8000a14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6063      	str	r3, [r4, #4]
 8000a1c:	e77e      	b.n	800091c <HAL_RCC_ClockConfig+0x34>
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000
 8000a24:	40021000 	.word	0x40021000
 8000a28:	080013b6 	.word	0x080013b6
 8000a2c:	20000008 	.word	0x20000008

08000a30 <HAL_RCC_GetHCLKFreq>:
}
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a46:	5cd3      	ldrb	r3, [r2, r3]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a4a:	6810      	ldr	r0, [r2, #0]
}    
 8000a4c:	40d8      	lsrs	r0, r3
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000
 8000a54:	080013c6 	.word	0x080013c6
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a6a:	6810      	ldr	r0, [r2, #0]
} 
 8000a6c:	40d8      	lsrs	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	40021000 	.word	0x40021000
 8000a74:	080013c6 	.word	0x080013c6
 8000a78:	20000008 	.word	0x20000008

08000a7c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a7c:	6803      	ldr	r3, [r0, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a86:	695a      	ldr	r2, [r3, #20]
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000a94:	4770      	bx	lr
	...

08000a98 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a9c:	6805      	ldr	r5, [r0, #0]
 8000a9e:	68c2      	ldr	r2, [r0, #12]
 8000aa0:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aa2:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aac:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000aae:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ab4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ab8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000abc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ac2:	696b      	ldr	r3, [r5, #20]
 8000ac4:	6982      	ldr	r2, [r0, #24]
 8000ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aca:	4313      	orrs	r3, r2
 8000acc:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <UART_SetConfig+0x138>)
{
 8000ad0:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000ad2:	429d      	cmp	r5, r3
 8000ad4:	f04f 0419 	mov.w	r4, #25
 8000ad8:	d146      	bne.n	8000b68 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ada:	f7ff ffbf 	bl	8000a5c <HAL_RCC_GetPCLK2Freq>
 8000ade:	fb04 f300 	mul.w	r3, r4, r0
 8000ae2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ae6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000aea:	00b6      	lsls	r6, r6, #2
 8000aec:	fbb3 f3f6 	udiv	r3, r3, r6
 8000af0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000af4:	011e      	lsls	r6, r3, #4
 8000af6:	f7ff ffb1 	bl	8000a5c <HAL_RCC_GetPCLK2Freq>
 8000afa:	4360      	muls	r0, r4
 8000afc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b06:	f7ff ffa9 	bl	8000a5c <HAL_RCC_GetPCLK2Freq>
 8000b0a:	4360      	muls	r0, r4
 8000b0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b1a:	fb08 7313 	mls	r3, r8, r3, r7
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	3332      	adds	r3, #50	; 0x32
 8000b22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b26:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b2a:	f7ff ff97 	bl	8000a5c <HAL_RCC_GetPCLK2Freq>
 8000b2e:	4360      	muls	r0, r4
 8000b30:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	fbb0 faf2 	udiv	sl, r0, r2
 8000b3a:	f7ff ff8f 	bl	8000a5c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b3e:	4360      	muls	r0, r4
 8000b40:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b4e:	fb08 a313 	mls	r3, r8, r3, sl
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	3332      	adds	r3, #50	; 0x32
 8000b56:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	433b      	orrs	r3, r7
 8000b60:	4433      	add	r3, r6
 8000b62:	60ab      	str	r3, [r5, #8]
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	f7ff ff68 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
 8000b6c:	fb04 f300 	mul.w	r3, r4, r0
 8000b70:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b74:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b78:	00b6      	lsls	r6, r6, #2
 8000b7a:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b82:	011e      	lsls	r6, r3, #4
 8000b84:	f7ff ff5a 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
 8000b88:	4360      	muls	r0, r4
 8000b8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b94:	f7ff ff52 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
 8000b98:	4360      	muls	r0, r4
 8000b9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ba4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ba8:	fb08 7313 	mls	r3, r8, r3, r7
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	3332      	adds	r3, #50	; 0x32
 8000bb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bb4:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000bb8:	f7ff ff40 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
 8000bbc:	4360      	muls	r0, r4
 8000bbe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	fbb0 faf2 	udiv	sl, r0, r2
 8000bc8:	f7ff ff38 	bl	8000a3c <HAL_RCC_GetPCLK1Freq>
 8000bcc:	e7b7      	b.n	8000b3e <UART_SetConfig+0xa6>
 8000bce:	bf00      	nop
 8000bd0:	40013800 	.word	0x40013800

08000bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	460e      	mov	r6, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000bde:	6821      	ldr	r1, [r4, #0]
 8000be0:	680b      	ldr	r3, [r1, #0]
 8000be2:	ea36 0303 	bics.w	r3, r6, r3
 8000be6:	d101      	bne.n	8000bec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000be8:	2000      	movs	r0, #0
}
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bec:	1c6b      	adds	r3, r5, #1
 8000bee:	d0f7      	beq.n	8000be0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bf0:	b995      	cbnz	r5, 8000c18 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bf2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000bf4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000bfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	f022 0201 	bic.w	r2, r2, #1
 8000c04:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c06:	2320      	movs	r3, #32
 8000c08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c0c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c10:	2300      	movs	r3, #0
 8000c12:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c18:	f7ff fada 	bl	80001d0 <HAL_GetTick>
 8000c1c:	1bc0      	subs	r0, r0, r7
 8000c1e:	4285      	cmp	r5, r0
 8000c20:	d2dd      	bcs.n	8000bde <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c22:	e7e6      	b.n	8000bf2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c24 <HAL_UART_Init>:
{
 8000c24:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c26:	4604      	mov	r4, r0
 8000c28:	b340      	cbz	r0, 8000c7c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c2a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c2e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c32:	b91b      	cbnz	r3, 8000c3c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c34:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c38:	f000 fb24 	bl	8001284 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c3c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c3e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c44:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c46:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c4c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c4e:	f7ff ff23 	bl	8000a98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c52:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c54:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c64:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c6c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c6e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c70:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c76:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
}
 8000c7e:	bd10      	pop	{r4, pc}

08000c80 <HAL_UART_Transmit>:
{
 8000c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c84:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c86:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c8a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c8c:	2b20      	cmp	r3, #32
{
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c92:	d14e      	bne.n	8000d32 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d049      	beq.n	8000d2c <HAL_UART_Transmit+0xac>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	d047      	beq.n	8000d2c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000c9c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d046      	beq.n	8000d32 <HAL_UART_Transmit+0xb2>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cae:	2321      	movs	r3, #33	; 0x21
 8000cb0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000cb4:	f7ff fa8c 	bl	80001d0 <HAL_GetTick>
 8000cb8:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000cba:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cbe:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000cc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	b96b      	cbnz	r3, 8000ce4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4632      	mov	r2, r6
 8000ccc:	2140      	movs	r1, #64	; 0x40
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff ff80 	bl	8000bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cd4:	b9a8      	cbnz	r0, 8000d02 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000cd6:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000cd8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000cdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ce4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce6:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cee:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cf0:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cfa:	d10e      	bne.n	8000d1a <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cfc:	f7ff ff6a 	bl	8000bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d00:	b110      	cbz	r0, 8000d08 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d02:	2003      	movs	r0, #3
 8000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d08:	882b      	ldrh	r3, [r5, #0]
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d10:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d12:	6923      	ldr	r3, [r4, #16]
 8000d14:	b943      	cbnz	r3, 8000d28 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000d16:	3502      	adds	r5, #2
 8000d18:	e7d3      	b.n	8000cc2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d1a:	f7ff ff5b 	bl	8000bd4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d1ef      	bne.n	8000d02 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d22:	6823      	ldr	r3, [r4, #0]
 8000d24:	782a      	ldrb	r2, [r5, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	3501      	adds	r5, #1
 8000d2a:	e7ca      	b.n	8000cc2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d32:	2002      	movs	r0, #2
}
 8000d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d38 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000d38:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d120      	bne.n	8000d82 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8000d40:	b1e9      	cbz	r1, 8000d7e <HAL_UART_Receive_IT+0x46>
 8000d42:	b1e2      	cbz	r2, 8000d7e <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d01a      	beq.n	8000d82 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d4c:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d4e:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d50:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d52:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d54:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d56:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d5a:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d5c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d5e:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d64:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000d68:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d6a:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000d6c:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d6e:	f041 0101 	orr.w	r1, r1, #1
 8000d72:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d74:	68d1      	ldr	r1, [r2, #12]
 8000d76:	f041 0120 	orr.w	r1, r1, #32
 8000d7a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000d7c:	4770      	bx	lr
      return HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4770      	bx	lr
    return HAL_BUSY;
 8000d82:	2002      	movs	r0, #2
}
 8000d84:	4770      	bx	lr

08000d86 <HAL_UART_TxCpltCallback>:
 8000d86:	4770      	bx	lr

08000d88 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d88:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d8c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d8e:	2b22      	cmp	r3, #34	; 0x22
 8000d90:	d136      	bne.n	8000e00 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d92:	6883      	ldr	r3, [r0, #8]
 8000d94:	6901      	ldr	r1, [r0, #16]
 8000d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d9e:	d123      	bne.n	8000de8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000da0:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000da2:	b9e9      	cbnz	r1, 8000de0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000da8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000dac:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000dae:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000db0:	3c01      	subs	r4, #1
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000db6:	b98c      	cbnz	r4, 8000ddc <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000db8:	6803      	ldr	r3, [r0, #0]
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	f022 0220 	bic.w	r2, r2, #32
 8000dc0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc8:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000dd8:	f000 f90c 	bl	8000ff4 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000ddc:	2000      	movs	r0, #0
}
 8000dde:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	f823 2b01 	strh.w	r2, [r3], #1
 8000de6:	e7e1      	b.n	8000dac <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000de8:	b921      	cbnz	r1, 8000df4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000dea:	1c59      	adds	r1, r3, #1
 8000dec:	6852      	ldr	r2, [r2, #4]
 8000dee:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	e7dc      	b.n	8000dae <UART_Receive_IT+0x26>
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	1c59      	adds	r1, r3, #1
 8000df8:	6281      	str	r1, [r0, #40]	; 0x28
 8000dfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dfe:	e7f7      	b.n	8000df0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000e00:	2002      	movs	r0, #2
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <HAL_UART_ErrorCallback>:
 8000e04:	4770      	bx	lr
	...

08000e08 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e08:	6803      	ldr	r3, [r0, #0]
{
 8000e0a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e0c:	681a      	ldr	r2, [r3, #0]
{
 8000e0e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000e10:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e12:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000e14:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000e16:	d107      	bne.n	8000e28 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e18:	0696      	lsls	r6, r2, #26
 8000e1a:	d55a      	bpl.n	8000ed2 <HAL_UART_IRQHandler+0xca>
 8000e1c:	068d      	lsls	r5, r1, #26
 8000e1e:	d558      	bpl.n	8000ed2 <HAL_UART_IRQHandler+0xca>
}
 8000e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e24:	f7ff bfb0 	b.w	8000d88 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e28:	f015 0501 	ands.w	r5, r5, #1
 8000e2c:	d102      	bne.n	8000e34 <HAL_UART_IRQHandler+0x2c>
 8000e2e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e32:	d04e      	beq.n	8000ed2 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e34:	07d3      	lsls	r3, r2, #31
 8000e36:	d505      	bpl.n	8000e44 <HAL_UART_IRQHandler+0x3c>
 8000e38:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e3a:	bf42      	ittt	mi
 8000e3c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e3e:	f043 0301 	orrmi.w	r3, r3, #1
 8000e42:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e44:	0750      	lsls	r0, r2, #29
 8000e46:	d504      	bpl.n	8000e52 <HAL_UART_IRQHandler+0x4a>
 8000e48:	b11d      	cbz	r5, 8000e52 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e52:	0793      	lsls	r3, r2, #30
 8000e54:	d504      	bpl.n	8000e60 <HAL_UART_IRQHandler+0x58>
 8000e56:	b11d      	cbz	r5, 8000e60 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e60:	0716      	lsls	r6, r2, #28
 8000e62:	d504      	bpl.n	8000e6e <HAL_UART_IRQHandler+0x66>
 8000e64:	b11d      	cbz	r5, 8000e6e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d066      	beq.n	8000f42 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e74:	0695      	lsls	r5, r2, #26
 8000e76:	d504      	bpl.n	8000e82 <HAL_UART_IRQHandler+0x7a>
 8000e78:	0688      	lsls	r0, r1, #26
 8000e7a:	d502      	bpl.n	8000e82 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f7ff ff83 	bl	8000d88 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e82:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e84:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e86:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e8a:	0711      	lsls	r1, r2, #28
 8000e8c:	d402      	bmi.n	8000e94 <HAL_UART_IRQHandler+0x8c>
 8000e8e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e92:	d01a      	beq.n	8000eca <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000e94:	f7ff fdf2 	bl	8000a7c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	0652      	lsls	r2, r2, #25
 8000e9e:	d510      	bpl.n	8000ec2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ea0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000ea2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ea8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000eaa:	b150      	cbz	r0, 8000ec2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_UART_IRQHandler+0x13c>)
 8000eae:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000eb0:	f7ff fa20 	bl	80002f4 <HAL_DMA_Abort_IT>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d044      	beq.n	8000f42 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000eb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ec0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff ff9e 	bl	8000e04 <HAL_UART_ErrorCallback>
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000eca:	f7ff ff9b 	bl	8000e04 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ece:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000ed2:	0616      	lsls	r6, r2, #24
 8000ed4:	d527      	bpl.n	8000f26 <HAL_UART_IRQHandler+0x11e>
 8000ed6:	060d      	lsls	r5, r1, #24
 8000ed8:	d525      	bpl.n	8000f26 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000eda:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000ede:	2a21      	cmp	r2, #33	; 0x21
 8000ee0:	d12f      	bne.n	8000f42 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ee2:	68a2      	ldr	r2, [r4, #8]
 8000ee4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000ee8:	6a22      	ldr	r2, [r4, #32]
 8000eea:	d117      	bne.n	8000f1c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000eec:	8811      	ldrh	r1, [r2, #0]
 8000eee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000ef2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000ef4:	6921      	ldr	r1, [r4, #16]
 8000ef6:	b979      	cbnz	r1, 8000f18 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000ef8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000efa:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000efc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000efe:	3a01      	subs	r2, #1
 8000f00:	b292      	uxth	r2, r2
 8000f02:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000f04:	b9ea      	cbnz	r2, 8000f42 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f0c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f18:	3201      	adds	r2, #1
 8000f1a:	e7ee      	b.n	8000efa <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f1c:	1c51      	adds	r1, r2, #1
 8000f1e:	6221      	str	r1, [r4, #32]
 8000f20:	7812      	ldrb	r2, [r2, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	e7ea      	b.n	8000efc <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f26:	0650      	lsls	r0, r2, #25
 8000f28:	d50b      	bpl.n	8000f42 <HAL_UART_IRQHandler+0x13a>
 8000f2a:	064a      	lsls	r2, r1, #25
 8000f2c:	d509      	bpl.n	8000f42 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f2e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f30:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f36:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f3e:	f7ff ff22 	bl	8000d86 <HAL_UART_TxCpltCallback>
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
 8000f44:	08000f49 	.word	0x08000f49

08000f48 <UART_DMAAbortOnError>:
{
 8000f48:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f4a:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f4c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f4e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f50:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f52:	f7ff ff57 	bl	8000e04 <HAL_UART_ErrorCallback>
 8000f56:	bd08      	pop	{r3, pc}

08000f58 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0x90>)
{
 8000f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	699a      	ldr	r2, [r3, #24]
{
 8000f60:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	f042 0210 	orr.w	r2, r2, #16
 8000f66:	619a      	str	r2, [r3, #24]
 8000f68:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f6a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8000ff0 <MX_GPIO_Init+0x98>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	f002 0210 	and.w	r2, r2, #16
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f78:	4c1c      	ldr	r4, [pc, #112]	; (8000fec <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	619a      	str	r2, [r3, #24]
 8000f80:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f82:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f84:	f002 0220 	and.w	r2, r2, #32
 8000f88:	9202      	str	r2, [sp, #8]
 8000f8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	f042 0204 	orr.w	r2, r2, #4
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	9303      	str	r3, [sp, #12]
 8000fa2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa4:	f7ff face 	bl	8000544 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4620      	mov	r0, r4
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	f7ff fac8 	bl	8000544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fba:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2503      	movs	r5, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	a904      	add	r1, sp, #16
 8000fc0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fc2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f7ff f9db 	bl	8000384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	a904      	add	r1, sp, #16
 8000fd4:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fda:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f7ff f9d1 	bl	8000384 <HAL_GPIO_Init>

}
 8000fe2:	b008      	add	sp, #32
 8000fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40011000 	.word	0x40011000

08000ff4 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff4:	b508      	push	{r3, lr}
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <HAL_UART_RxCpltCallback+0x4c>)
 8000ffc:	f7ff faa7 	bl	800054e <HAL_GPIO_TogglePin>

  if (aRxBuffer[0] > 127 && aRxBuffer[1] < 128 && aRxBuffer[2] < 128)
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_UART_RxCpltCallback+0x50>)
 8001002:	f993 2000 	ldrsb.w	r2, [r3]
 8001006:	2a00      	cmp	r2, #0
 8001008:	da0c      	bge.n	8001024 <HAL_UART_RxCpltCallback+0x30>
 800100a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800100e:	2a00      	cmp	r2, #0
 8001010:	db08      	blt.n	8001024 <HAL_UART_RxCpltCallback+0x30>
 8001012:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db04      	blt.n	8001024 <HAL_UART_RxCpltCallback+0x30>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800101a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <HAL_UART_RxCpltCallback+0x54>)
 8001020:	f7ff fa95 	bl	800054e <HAL_GPIO_TogglePin>

  HAL_UART_Transmit(&huart1, (uint8_t *)aRxBuffer, NR_MIDI_BYTES, 100);
 8001024:	2364      	movs	r3, #100	; 0x64
 8001026:	2203      	movs	r2, #3
 8001028:	4906      	ldr	r1, [pc, #24]	; (8001044 <HAL_UART_RxCpltCallback+0x50>)
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <HAL_UART_RxCpltCallback+0x58>)
 800102c:	f7ff fe28 	bl	8000c80 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, NR_MIDI_BYTES);
}
 8001030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, NR_MIDI_BYTES);
 8001034:	2203      	movs	r2, #3
 8001036:	4903      	ldr	r1, [pc, #12]	; (8001044 <HAL_UART_RxCpltCallback+0x50>)
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <HAL_UART_RxCpltCallback+0x58>)
 800103a:	f7ff be7d 	b.w	8000d38 <HAL_UART_Receive_IT>
 800103e:	bf00      	nop
 8001040:	40010800 	.word	0x40010800
 8001044:	20000028 	.word	0x20000028
 8001048:	40011000 	.word	0x40011000
 800104c:	20000030 	.word	0x20000030

08001050 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001052:	4c05      	ldr	r4, [pc, #20]	; (8001068 <_Error_Handler+0x18>)
 8001054:	4620      	mov	r0, r4
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	f7ff fa78 	bl	800054e <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001062:	f7ff f8bb 	bl	80001dc <HAL_Delay>
 8001066:	e7f5      	b.n	8001054 <_Error_Handler+0x4>
 8001068:	40011000 	.word	0x40011000

0800106c <SystemClock_Config>:
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8001070:	b510      	push	{r4, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001076:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001078:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800107e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001082:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001086:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800108c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f7ff fa63 	bl	8000558 <HAL_RCC_OscConfig>
 8001092:	b118      	cbz	r0, 800109c <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
 8001094:	2192      	movs	r1, #146	; 0x92
    _Error_Handler(__FILE__, __LINE__);
 8001096:	4813      	ldr	r0, [pc, #76]	; (80010e4 <SystemClock_Config+0x78>)
 8001098:	f7ff ffda 	bl	8001050 <_Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109c:	230f      	movs	r3, #15
 800109e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a6:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a8:	4621      	mov	r1, r4
 80010aa:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b0:	f7ff fc1a 	bl	80008e8 <HAL_RCC_ClockConfig>
 80010b4:	4604      	mov	r4, r0
 80010b6:	b108      	cbz	r0, 80010bc <SystemClock_Config+0x50>
    _Error_Handler(__FILE__, __LINE__);
 80010b8:	21a0      	movs	r1, #160	; 0xa0
 80010ba:	e7ec      	b.n	8001096 <SystemClock_Config+0x2a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80010bc:	f7ff fcb8 	bl	8000a30 <HAL_RCC_GetHCLKFreq>
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c8:	f7ff f8ec 	bl	80002a4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010cc:	2004      	movs	r0, #4
 80010ce:	f7ff f8ff 	bl	80002d0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010d2:	4622      	mov	r2, r4
 80010d4:	4621      	mov	r1, r4
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010da:	f7ff f8a3 	bl	8000224 <HAL_NVIC_SetPriority>
}
 80010de:	b010      	add	sp, #64	; 0x40
 80010e0:	bd10      	pop	{r4, pc}
 80010e2:	bf00      	nop
 80010e4:	080013a8 	.word	0x080013a8

080010e8 <main>:
{
 80010e8:	b508      	push	{r3, lr}
  HAL_Init();
 80010ea:	f7ff f853 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80010ee:	f7ff ffbd 	bl	800106c <SystemClock_Config>
  MX_GPIO_Init();
 80010f2:	f7ff ff31 	bl	8000f58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010f6:	f000 f8a5 	bl	8001244 <MX_USART1_UART_Init>
  if (HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, NR_MIDI_BYTES) != HAL_OK)
 80010fa:	2203      	movs	r2, #3
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <main+0x34>)
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <main+0x38>)
 8001100:	f7ff fe1a 	bl	8000d38 <HAL_UART_Receive_IT>
 8001104:	4602      	mov	r2, r0
 8001106:	b118      	cbz	r0, 8001110 <main+0x28>
	  _Error_Handler(__FILE__, __LINE__);
 8001108:	2168      	movs	r1, #104	; 0x68
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <main+0x3c>)
 800110c:	f7ff ffa0 	bl	8001050 <_Error_Handler>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <main+0x40>)
 8001116:	f7ff fa15 	bl	8000544 <HAL_GPIO_WritePin>
 800111a:	e7fe      	b.n	800111a <main+0x32>
 800111c:	20000028 	.word	0x20000028
 8001120:	20000030 	.word	0x20000030
 8001124:	080013a8 	.word	0x080013a8
 8001128:	40010800 	.word	0x40010800

0800112c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_MspInit+0x98>)
{
 800112e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	f002 0201 	and.w	r2, r2, #1
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114a:	61da      	str	r2, [r3, #28]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	f7ff f853 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	f06f 000b 	mvn.w	r0, #11
 8001160:	4611      	mov	r1, r2
 8001162:	f7ff f85f 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	f06f 000a 	mvn.w	r0, #10
 800116c:	4611      	mov	r1, r2
 800116e:	f7ff f859 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	f06f 0009 	mvn.w	r0, #9
 8001178:	4611      	mov	r1, r2
 800117a:	f7ff f853 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	f06f 0004 	mvn.w	r0, #4
 8001184:	4611      	mov	r1, r2
 8001186:	f7ff f84d 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	f06f 0003 	mvn.w	r0, #3
 8001190:	4611      	mov	r1, r2
 8001192:	f7ff f847 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	f06f 0001 	mvn.w	r0, #1
 800119c:	4611      	mov	r1, r2
 800119e:	f7ff f841 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a8:	4611      	mov	r1, r2
 80011aa:	f7ff f83b 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ae:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_MspInit+0x9c>)
 80011b0:	6853      	ldr	r3, [r2, #4]
 80011b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ba:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011bc:	b003      	add	sp, #12
 80011be:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000

080011cc <NMI_Handler>:
 80011cc:	4770      	bx	lr

080011ce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler>

080011d0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler>

080011d2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler>

080011d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler>

080011d6 <SVC_Handler>:
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:
 80011d8:	4770      	bx	lr

080011da <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80011dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f7fe ffeb 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80011e6:	f7ff b880 	b.w	80002ea <HAL_SYSTICK_IRQHandler>
	...

080011ec <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <USART1_IRQHandler+0x8>)
 80011ee:	f7ff be0b 	b.w	8000e08 <HAL_UART_IRQHandler>
 80011f2:	bf00      	nop
 80011f4:	20000030 	.word	0x20000030

080011f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <SystemInit+0x40>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f042 0201 	orr.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <SystemInit+0x44>)
 8001206:	400a      	ands	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001210:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001214:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800121c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001224:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001226:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800122a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800122c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <SystemInit+0x48>)
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	f8ff0000 	.word	0xf8ff0000
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001244:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 31250;
 8001246:	f647 2e12 	movw	lr, #31250	; 0x7a12
  huart1.Instance = USART1;
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 31250;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 31250;
 8001250:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001254:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001256:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001258:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125c:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001262:	f7ff fcdf 	bl	8000c24 <HAL_UART_Init>
 8001266:	b128      	cbz	r0, 8001274 <MX_USART1_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8001268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800126c:	2142      	movs	r1, #66	; 0x42
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART1_UART_Init+0x3c>)
 8001270:	f7ff beee 	b.w	8001050 <_Error_Handler>
 8001274:	bd08      	pop	{r3, pc}
 8001276:	bf00      	nop
 8001278:	20000030 	.word	0x20000030
 800127c:	40013800 	.word	0x40013800
 8001280:	080013ce 	.word	0x080013ce

08001284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001284:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8001286:	6802      	ldr	r2, [r0, #0]
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_UART_MspInit+0x60>)
{
 800128a:	b086      	sub	sp, #24
  if(uartHandle->Instance==USART1)
 800128c:	429a      	cmp	r2, r3
 800128e:	d127      	bne.n	80012e0 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001290:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001294:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800129c:	619a      	str	r2, [r3, #24]
 800129e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f7ff f863 	bl	8000384 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	a902      	add	r1, sp, #8
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f7ff f85a 	bl	8000384 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012d0:	2025      	movs	r0, #37	; 0x25
 80012d2:	4622      	mov	r2, r4
 80012d4:	4621      	mov	r1, r4
 80012d6:	f7fe ffa5 	bl	8000224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012da:	2025      	movs	r0, #37	; 0x25
 80012dc:	f7fe ffd6 	bl	800028c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012e0:	b006      	add	sp, #24
 80012e2:	bd10      	pop	{r4, pc}
 80012e4:	40013800 	.word	0x40013800
 80012e8:	40010800 	.word	0x40010800

080012ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012ee:	e003      	b.n	80012f8 <LoopCopyDataInit>

080012f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012f6:	3104      	adds	r1, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012f8:	480a      	ldr	r0, [pc, #40]	; (8001324 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001300:	d3f6      	bcc.n	80012f0 <CopyDataInit>
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001304:	e002      	b.n	800130c <LoopFillZerobss>

08001306 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001308:	f842 3b04 	str.w	r3, [r2], #4

0800130c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800130e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001310:	d3f9      	bcc.n	8001306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001312:	f7ff ff71 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f000 f80f 	bl	8001338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131a:	f7ff fee5 	bl	80010e8 <main>
  bx lr
 800131e:	4770      	bx	lr
  ldr r3, =_sidata
 8001320:	080013e8 	.word	0x080013e8
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001328:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001330:	20000070 	.word	0x20000070

08001334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_2_IRQHandler>
	...

08001338 <__libc_init_array>:
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	2500      	movs	r5, #0
 800133c:	4e0c      	ldr	r6, [pc, #48]	; (8001370 <__libc_init_array+0x38>)
 800133e:	4c0d      	ldr	r4, [pc, #52]	; (8001374 <__libc_init_array+0x3c>)
 8001340:	1ba4      	subs	r4, r4, r6
 8001342:	10a4      	asrs	r4, r4, #2
 8001344:	42a5      	cmp	r5, r4
 8001346:	d109      	bne.n	800135c <__libc_init_array+0x24>
 8001348:	f000 f81a 	bl	8001380 <_init>
 800134c:	2500      	movs	r5, #0
 800134e:	4e0a      	ldr	r6, [pc, #40]	; (8001378 <__libc_init_array+0x40>)
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <__libc_init_array+0x44>)
 8001352:	1ba4      	subs	r4, r4, r6
 8001354:	10a4      	asrs	r4, r4, #2
 8001356:	42a5      	cmp	r5, r4
 8001358:	d105      	bne.n	8001366 <__libc_init_array+0x2e>
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001360:	4798      	blx	r3
 8001362:	3501      	adds	r5, #1
 8001364:	e7ee      	b.n	8001344 <__libc_init_array+0xc>
 8001366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800136a:	4798      	blx	r3
 800136c:	3501      	adds	r5, #1
 800136e:	e7f2      	b.n	8001356 <__libc_init_array+0x1e>
 8001370:	080013e0 	.word	0x080013e0
 8001374:	080013e0 	.word	0x080013e0
 8001378:	080013e0 	.word	0x080013e0
 800137c:	080013e4 	.word	0x080013e4

08001380 <_init>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr

0800138c <_fini>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr
